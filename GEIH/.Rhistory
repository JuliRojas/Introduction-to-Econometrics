Promedio_Minutos <- mean(NBA$Minutos)
Promedio_Faltas <- mean(NBA$Rotación)
NBA$Confianza <- as.factor(ifelse(NBA$Minutos >= Promedio_Minutos, "Sí", "No"))
NBA$Agresividad <- as.factor(ifelse(NBA$Rotación >= Promedio_Faltas, "Sí", "No"))
NBA <- subset(NBA, select = -c(Partidos))
# Estimaciones ----
Modelo1 <- lm(formula = Salario ~ ., data = NBA)
summary(Modelo1)
Modelo2 <- lm(formula = Salario ~ . - Rotación, data = NBA)
summary(Modelo2)
# ¿Es importante la agresividad del jugador?
ggplot(NBA, aes(x = Minutos, y = Salario, colour = Agresividad)) +
geom_point() +
geom_smooth(method="lm")
Modelo3 <- lm(formula = Salario ~ . - Rotación - Agresividad, data = NBA)
summary(Modelo3)
# Presentación ----
stargazer(Modelo1, Modelo2, Modelo3, header = FALSE,
type = "text",
title = "Distintas estimaciones del salario",
keep.stat = c("n", "rsq"), digits = 2, single.row = F,
intercept.bottom = FALSE)
# Declaramos el mejor modelo:
ModeloFinal <- Modelo3
# 1.3| Correcta especificación ----
RESET <- lm(formula = Salario ~ . - Rotación - Agresividad +
I(fitted(ModeloFinal)^2) + I(fitted(ModeloFinal)^3), data = NBA)
summary(RESET)
linearHypothesis(RESET, matchCoefs(RESET, "fitted"))
linearHypothesis(RESET, c("I(fitted(ModeloFinal)^2) = 0",
"I(fitted(ModeloFinal)^3) = 0"))
resettest(ModeloFinal, power=2, type="fitted")
rm(list = ls())
library(readr)       # Importación del .csv.
library(tidyverse)   # Manipulación de datos.
library(lmtest)      # Pruebas sobre modelos lineales.
library(gdata)       #
library(stargazer)   # Tablas con los resultados.
library(GGally)      # Gráficos de distribuciones
library(corrplot)    # y correlaciones.
library(psych)       # Distribución de las variables.
library(car)         # Permite hacer las pruebas de hipótesis sobre un conjunto de parámetros.
library(strucchange) # Permite comprobar la existencia de un cambio estructural.
library(reshape2)    # Para acomodar los datos a ggplot en el BoxPlot.
library(outliers)    # Para detectar valores atípicos.
# Bases de datos ----------------------------------------------------------
# https://www.basketball-reference.com/about/glossary.html
setwd("C:/Users/judro/OneDrive/Documentos/GitHub/Introduction-to-Econometrics/Sesión 06")
NBA <- read.csv("NBA.csv", header = T, sep = ",", stringsAsFactors = T)
NBA <- NBA %>%
add_column(ID = 1:dim(NBA)[1],
.before = 1)
# Las variables seleccionadas son:
# 1| Salary: Salario recibido entre 2017-2018.
# 2|    Age: Edad.
# 3|      G: Juegos.
# 4|     MP: Minutos jugados.
# 5|    PER: Calificación de eficiencia del jugador.
# 6|   TOV.: Porcentaje de rotación.
# Una rotación ocurre cuando un equipo pierde la posesión del balón contra el
# equipo contrario.
NBA           <- select(NBA, c("ID", "Salary", "Age", "G", "MP", "PER", "TOV."))
colnames(NBA) <- c("ID", "Salario", "Edad", "Juegos", "Minutos jugados",
"Eficiencia", "Rotación")
colSums(is.na.data.frame(NBA))
Relleno                           <- median(NBA$Rotación, na.rm = T)
NBA$Rotación[is.na(NBA$Rotación)] <- Relleno
colSums(is.na.data.frame(NBA))
glimpse(NBA)
# 1| Regresión ------------------------------------------------------------
# 1.1| Creación de variables ----------------------------------------------
`Promedio minutos`          <- mean(NBA$`Minutos jugados`)
`Promedio faltas`           <- mean(NBA$Rotación)
NBA$`Índice de confianza`   <- as.factor(ifelse(NBA$`Minutos jugados` >= `Promedio minutos`, "Sí", "No"))
NBA$`Índice de agresividad` <- as.factor(ifelse(NBA$Rotación >= `Promedio faltas`, "Sí", "No"))
# ¿Cómo son los valores atípicos?
Cajas = melt(NBA, id = c('ID'))
Cajas = Cajas %>% filter(variable %in% c("Salario", "Edad", "Juegos",
"Minutos jugados", "Eficiencia",
"Rotación"))
Cajas$value <- as.numeric(Cajas$value)
ggplot(data = Cajas, aes(x = factor(1), y = value)) +
geom_boxplot() +
facet_wrap(. ~ variable, scales="free") +
labs(title = "Gráfica de caja por variable",
subtitle = "Visualización de datos atípicos",
x = "Variables",
y = "Valores") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# ¿Es importante la agresividad del jugador?
ggplot(NBA, aes(x = `Minutos jugados`,
y = Salario,
colour = `Índice de agresividad`)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Modelo de regresión",
subtitle = "Comparación por su agresividad",
x = "Minutos jugados",
y = "Salario") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# ¿Habrá algún componente con comportamiento cuadrático?
ggplot(NBA, aes(x = Juegos, y = `Minutos jugados`)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2)) +
labs(title = "Modelo de regresión",
subtitle = "Relación cuadrática",
x = "Número de partidos",
y = "Minutos jugados") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# 1.2| Modelación ---------------------------------------------------------
# 1.2.1| Con datos atípicos -----------------------------------------------
NBA             <- select(NBA, -c("ID"))
`Primer modelo` <- lm(formula = Salario ~ ., data = NBA)
summary(`Primer modelo`)
View(NBA)
# 2.1| Con datos atípicos sin multicolinealidad ---------------------------
`Tercer modelo` <- lm(formula = Salario ~ . - Juegos - Rotación - `Índice de agresividad`, data = NBA)
summary(`Tercer modelo`)
# 3| Forma funcional adecuada ---------------------------------------------
# 3.1| Con datos atípicos -------------------------------------------------
NBA$`Ajustado cuadrado` <- fitted(`Tercer modelo`)^2
NBA$`Ajustado cúbico`   <- fitted(`Tercer modelo`)^3
`Tercer modelo no restringido` <- lm(formula = Salario ~ . - Juegos - Rotación - `Índice de agresividad` + `Ajustado cuadrado` + `Ajustado cúbico`,
data = NBA)
# Test RESET:
linearHypothesis(`Tercer modelo no restringido`, c("`Ajustado cuadrado`=0", "`Ajustado cúbico`=0"))
resettest(`Tercer modelo no restringido`, power = 2:3, type="fitted")
resettest(`Tercer modelo no restringido`, power = 2, type="fitted")
resettest(`Tercer modelo`, power = 2, type="fitted")
resettest(`Tercer modelo`, power = 2:3, type="fitted")
rm(list = ls())
library(readr)       # Importación del .csv.
library(tidyverse)   # Manipulación de datos.
library(lmtest)      # Pruebas sobre modelos lineales.
library(gdata)       #
library(stargazer)   # Tablas con los resultados.
library(GGally)      # Gráficos de distribuciones
library(corrplot)    # y correlaciones.
library(psych)       # Distribución de las variables.
library(car)         # Permite hacer las pruebas de hipótesis sobre un conjunto de parámetros.
library(strucchange) # Permite comprobar la existencia de un cambio estructural.
library(reshape2)    # Para acomodar los datos a ggplot en el BoxPlot.
library(outliers)    # Para detectar valores atípicos.
# Bases de datos ----------------------------------------------------------
# https://www.basketball-reference.com/about/glossary.html
setwd("C:/Users/judro/OneDrive/Documentos/GitHub/Introduction-to-Econometrics/Sesión 06")
NBA <- read.csv("NBA.csv", header = T, sep = ",", stringsAsFactors = T)
NBA <- NBA %>%
add_column(ID = 1:dim(NBA)[1],
.before = 1)
# Las variables seleccionadas son:
# 1| Salary: Salario recibido entre 2017-2018.
# 2|    Age: Edad.
# 3|      G: Juegos.
# 4|     MP: Minutos jugados.
# 5|    PER: Calificación de eficiencia del jugador.
# 6|   TOV.: Porcentaje de rotación.
# Una rotación ocurre cuando un equipo pierde la posesión del balón contra el
# equipo contrario.
NBA           <- select(NBA, c("ID", "Salary", "Age", "G", "MP", "PER", "TOV."))
colnames(NBA) <- c("ID", "Salario", "Edad", "Juegos", "Minutos jugados",
"Eficiencia", "Rotación")
colSums(is.na.data.frame(NBA))
Relleno                           <- median(NBA$Rotación, na.rm = T)
NBA$Rotación[is.na(NBA$Rotación)] <- Relleno
colSums(is.na.data.frame(NBA))
glimpse(NBA)
# 1| Regresión ------------------------------------------------------------
# 1.1| Creación de variables ----------------------------------------------
`Promedio minutos`          <- mean(NBA$`Minutos jugados`)
`Promedio faltas`           <- mean(NBA$Rotación)
NBA$`Índice de confianza`   <- as.factor(ifelse(NBA$`Minutos jugados` >= `Promedio minutos`, "Sí", "No"))
NBA$`Índice de agresividad` <- as.factor(ifelse(NBA$Rotación >= `Promedio faltas`, "Sí", "No"))
# ¿Cómo son los valores atípicos?
Cajas = melt(NBA, id = c('ID'))
Cajas = Cajas %>% filter(variable %in% c("Salario", "Edad", "Juegos",
"Minutos jugados", "Eficiencia",
"Rotación"))
Cajas$value <- as.numeric(Cajas$value)
ggplot(data = Cajas, aes(x = factor(1), y = value)) +
geom_boxplot() +
facet_wrap(. ~ variable, scales="free") +
labs(title = "Gráfica de caja por variable",
subtitle = "Visualización de datos atípicos",
x = "Variables",
y = "Valores") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# ¿Es importante la agresividad del jugador?
ggplot(NBA, aes(x = `Minutos jugados`,
y = Salario,
colour = `Índice de agresividad`)) +
geom_point() +
geom_smooth(method = "lm") +
labs(title = "Modelo de regresión",
subtitle = "Comparación por su agresividad",
x = "Minutos jugados",
y = "Salario") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# ¿Habrá algún componente con comportamiento cuadrático?
ggplot(NBA, aes(x = Juegos, y = `Minutos jugados`)) +
geom_point() +
geom_smooth(method = "lm", formula = y ~ poly(x, 2)) +
labs(title = "Modelo de regresión",
subtitle = "Relación cuadrática",
x = "Número de partidos",
y = "Minutos jugados") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
# 1.2| Modelación ---------------------------------------------------------
# 1.2.1| Con datos atípicos -----------------------------------------------
NBA             <- select(NBA, -c("ID"))
`Primer modelo` <- lm(formula = Salario ~ ., data = NBA)
summary(`Primer modelo`)
par(mfrow = c(3, 2))                # Entorno recomendado para el diagnóstico.
plot(`Primer modelo`, which = 1:6)
par(mfrow = c(1, 1))                # Se regresa al entorno típico.
`Tercer modelo` <- lm(formula = Salario ~ . - Juegos - Rotación - `Índice de agresividad`, data = NBA)
summary(`Tercer modelo`)
par(mfrow = c(3, 2))                # Entorno recomendado para el diagnóstico.
plot(`Tercer modelo`, which = 1:6)
par(mfrow = c(1, 1))                # Se regresa al entorno típico.
# 3| Forma funcional adecuada ---------------------------------------------
# 3.1| Con datos atípicos -------------------------------------------------
RESET <- lm(formula = Salario ~ . - Juegos - Rotación - `Índice de agresividad` +
I(fitted(`Tercer modelo`)^2) + I(fitted(`Tercer modelo`)^3),
data = NBA)
# Test RESET:
linearHypothesis(RESET, matchCoefs(RESET, "fitted"))
linearHypothesis(RESET, c("I(fitted(`Tercer modelo`)^2) = 0",
"I(fitted(`Tercer modelo`)^3) = 0"))
resettest(`Tercer modelo`, power = 2:3, type = "fitted")
# Corrección:
`Quinto modelo` <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad` + I(fitted(`Tercer modelo`)^2) +
I(fitted(`Tercer modelo`)^3),
data = NBA)
RESET <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad` + I(fitted(`Quinto modelo`)^2) +
I(fitted(`Quinto modelo`)^3),
data = NBA)
resettest(`Tercer modelo`, power = 2:3, type = "fitted")
resettest(`Quinto modelo`, power = 2:3, type = "fitted")
par(mfrow = c(3, 2))                # Entorno recomendado para el diagnóstico.
plot(`Quinto modelo`, which = 1:6)
par(mfrow = c(1, 1))                # Se regresa al entorno típico.
qf(.95, df1=2, df2=476)
# 4| Cambios estructurales ------------------------------------------------
CUSUM <- efp(`Quinto modelo`, data = NBA, type = "OLS-CUSUM")
plot(CUSUM, alpha = 0.05,
main = "CUSUM",
xlab = "Ln(Salario por hora)",
ylab = "Proceso de fluctuación empírico")
sctest(CUSUM)
CUSUM <- efp(`Quinto modelo`, data = NBA)
plot(CUSUM)
sctest(`Quinto modelo`)
# Corrección:
`Quinto modelo` <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad`),
data = NBA)
# Corrección:
`Quinto modelo` <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad`),
data = NBA)
# Corrección:
`Quinto modelo` <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad`,
data = NBA)
RESET <- lm(formula = log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad` + I(fitted(`Quinto modelo`)^2) +
I(fitted(`Quinto modelo`)^3),
data = NBA)
resettest(`Quinto modelo`, power = 2:3, type = "fitted")
par(mfrow = c(3, 2))                # Entorno recomendado para el diagnóstico.
plot(`Quinto modelo`, which = 1:6)
par(mfrow = c(1, 1))                # Se regresa al entorno típico.
# 4| Cambios estructurales ------------------------------------------------
CUSUM <- efp(`Quinto modelo`, data = NBA, type = "OLS-CUSUM")
plot(CUSUM, alpha = 0.05,
main = "CUSUM",
xlab = "Ln(Salario por hora)",
ylab = "Proceso de fluctuación empírico")
sctest(`Quinto modelo`)
sctest(`Quinto modelo`, type = 'Chow')
sctest(`Quinto modelo`, type = 'Chow', point = 200)
sctest(`Quinto modelo`, type = 'Chow', point = 300)
sctest(`Quinto modelo`, type = 'Chow', point = 100)
sctest(log(Salario) ~ . - Juegos - Rotación -
`Índice de agresividad`, type = 'Chow', point = 100)
sctest(log(Salario) ~ . - Juegos - Rotación - `Índice de agresividad`, type = 'Chow', point = 100)
sctest(`Quinto modelo`, type = 'Chow', point = 100)
sctest(`Quinto modelo`, type = 'Chow', point = 100)
?sctest
data("longley")
sctest(Employed ~ Year + GNP.deflator + GNP + Armed.Forces, data = longley,
type = "Chow", point = 7)
sctest(`Quinto modelo`, type = "Chow", point = 100)
data("longley")
sctest(Employed ~ Year + GNP.deflator + GNP + Armed.Forces, data = longley,
type = "Chow", point = 7)
sctest(log(Salario) ~ . - Juegos - Rotación - `Índice de agresividad`, type = "Chow", point = 100)
summary(`Quinto modelo`)
sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, type = "Chow", point = 100)
sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, data = NBA, type = "Chow", point = 100)
sctest(`Quinto modelo`, data = NBA, type = "Chow", point = 100)
sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, data = NBA, type = "Chow", point = 100)
for (i in 10:480) {
flush.console()
print(paste("El p-value asociado es de: ",
round(sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, data = NBA, type = "Chow", point = i)[[2]], 4), "en el punto: ",
i + 1928))
}
print(paste("El p-value asociado es de: ",
round(sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, data = NBA, type = "Chow", point = i)[[2]], 4), "en el punto: ",
i))
for (i in 20:470) {
flush.console()
print(paste("El p-value asociado es de: ",
round(sctest(log(Salario) ~ Edad + `Minutos jugados` + Eficiencia + `Índice de confianza`, data = NBA, type = "Chow", point = i)[[2]], 4), "en el punto: ",
i))
}
rm(list = ls())
library(readr)
library(tidyverse)
library(gdata)
library(stargazer)
# Bases de datos ----------------------------------------------------------
setwd("C:/Users/judro/OneDrive/Documentos/GitHub/Introduction-to-Econometrics/GEIH")
CaracterísticasGenerales <- read_delim("Area_Caracteristicas_Generales_Personas.csv",
";", escape_double = FALSE, trim_ws = TRUE)
CaracterísticasOcupados <- read_delim("Area_Ocupados.csv", ";",
escape_double = FALSE, trim_ws = TRUE)
# 1| Manipulación ---------------------------------------------------------
# 1.1| Creación de los ID -------------------------------------------------
#      Se procede a cambiar los nombres de las variables consideradas como
#      apropiadas para la creación de las identificaciones, a saber:
#      - DIRECTORIO: ID.Vivienda
#      - ORDEN: ID.Persona
#      - SECUENCIA_P: ID.Hogar
# Para las Características Generales: A través de
colnames(CaracterísticasGenerales)[which(colnames(CaracterísticasGenerales) == 'DIRECTORIO')] <- 'ID.Vivienda'
colnames(CaracterísticasGenerales)[which(colnames(CaracterísticasGenerales) == 'ORDEN')] <- 'ID.Persona'
colnames(CaracterísticasGenerales)[which(colnames(CaracterísticasGenerales) == 'SECUENCIA_P')] <- 'ID.Hogar'
# Para los Individuos Ocupados:
CaracterísticasOcupados <- rename.vars(CaracterísticasOcupados,
from = c('DIRECTORIO', 'ORDEN', 'SECUENCIA_P'),
to = c('ID.Vivienda', 'ID.Persona', 'ID.Hogar'))
# Luego, el ID único vendrá dado por:
CaracterísticasGenerales = CaracterísticasGenerales %>%
add_column(ID = paste(as.character(CaracterísticasGenerales$ID.Vivienda),
as.character(CaracterísticasGenerales$ID.Hogar),
as.character(CaracterísticasGenerales$ID.Persona),
sep = ''),
.before = 1)
CaracterísticasOcupados = CaracterísticasOcupados %>%
add_column(ID = paste(as.character(CaracterísticasOcupados$ID.Vivienda),
as.character(CaracterísticasOcupados$ID.Hogar),
as.character(CaracterísticasOcupados$ID.Persona),
sep = ''),
.before = 1)
# Se verifica que las llaves sean únicas:
length(CaracterísticasGenerales$ID) == length(unique(CaracterísticasGenerales$ID))
length(CaracterísticasOcupados$ID) == length(unique(CaracterísticasOcupados$ID))
# 1.2| Unión de las bases de datos ----------------------------------------
#      Se revisa los nombres que son idénticos en ambas bases de datos y se
#      deja, solamente, los de 'CaracterísticasGenerales', pues es el
#      documento más extenso. Posee a todos los individuos.
intersect(names(CaracterísticasGenerales), names(CaracterísticasOcupados))
CaracterísticasOcupados = select(CaracterísticasOcupados, -c("ID.Vivienda",
"ID.Hogar",
"ID.Persona",
"HOGAR", "REGIS",
"AREA", "MES",
"DPTO",
"fex_c_2011"))
# Cualquiera de las uniones de los datos listadas a continuación es válida.
Datos = inner_join(x = CaracterísticasGenerales,
y = CaracterísticasOcupados,
by = 'ID')
Datos = merge(x = CaracterísticasGenerales,
y = CaracterísticasOcupados,
by = 'ID')
# 1.3| Selección de las variables -----------------------------------------
#      Finalmente, se selecciona las variables a trabajar, a saber:
#      -   p6800: Horas que trabaja a la semana.
#      -   p6850: Horas trabajadas la semana pasada.
#      -   p7045: Horas trabajadas en una labor secundaria a la semana.
#      - inglabo: Ingresos laborales mensuales.
#      -   p6040: Edad.
#      -     esc: Escolaridad.
#      -   p6020: Sexo.
Datos = select(Datos,
c('P6800', 'P6850', 'P7045', 'INGLABO', 'P6040', 'ESC', 'P6020'))
Datos = select(Datos, c('P6800', 'INGLABO', 'P6040', 'ESC', 'P6020'))
colnames(Datos) <- c('Trabajo semanal', 'Ingreso mensual',
'Edad', 'Escolaridad', 'Sexo')
# Hay dos opciones para trabajar con el sexo, a saber:
# 1| Factores: Trabajemos con esta.
Datos = Datos %>% mutate(Sexo = case_when(Sexo == 1 ~ 'Hombre', Sexo == 2 ~ 'Mujer'),
Sexo = factor(Sexo, levels = c('Hombre', 'Mujer')))
# 2| Binarias:
#    Datos = Datos %>% mutate(Sexo = case_when(Sexo == 1 ~ 1, Sexo == 2 ~ 0))
# Se procede a generar las variables de salario por hora y experiencia potencial.
Datos = Datos %>%
add_column(`Salario por hora` = (Datos$`Ingreso mensual`*12)/(Datos$`Trabajo semanal`*52),
`Experiencia Potencial` = Datos$Edad - Datos$Escolaridad - 5)
# Pueden analizarse un poco los datos, por ejemplo:
max(Datos$`Salario por hora`, na.rm = T)
min(Datos$`Salario por hora`, na.rm = T)
max(Datos$Escolaridad, na.rm = T)
min(Datos$Escolaridad, na.rm = T)
# Para no operar con logaritmo valores de cero (0), el logaritmo del salario
# irá con un 'case_when', como se mostraba previamente.
Datos = Datos %>%
mutate(`Ln(Salario por hora)` = case_when(`Ingreso mensual` > 1000  ~ log(`Salario por hora`),
`Ingreso mensual` <= 1000  ~ NA_real_))
# Se revisa cuántos datos se encontraban por debajo del umbral.
sum(is.na(Datos$`Ln(Salario por hora)`))
length(Datos$`Ln(Salario por hora)`) - sum(is.na(Datos$`Ln(Salario por hora)`))
# Se desecha los valores perdido:
Datos = as.data.frame(drop_na(Datos))
# 2| Regresión ------------------------------------------------------------
#    Ya con todas las variables necesarias creadas, se procede a realizar la
#    estimación.
RegresiónOriginal <- lm(`Ln(Salario por hora)` ~ Escolaridad +
`Experiencia Potencial` +
I(`Experiencia Potencial`^2), data = Datos)
summary(RegresiónOriginal)
RegresiónDiscriminación <- lm(`Ln(Salario por hora)` ~ Escolaridad +
`Experiencia Potencial` +
I(`Experiencia Potencial`^2) +
Sexo, data = Datos)
summary(RegresiónDiscriminación)
# 2.1| Presentación -------------------------------------------------------
#      Un poco de estadística descriptiva podría ser:
stargazer(Datos, type = "text", title = "Estadística descriptiva", digits = 2)
# Así mismo, las diferencias entre las regresiones:
stargazer(RegresiónOriginal, RegresiónDiscriminación, type = "text",
title = 'Comparación de las regresiones', digits = 2)
# 3| Supuestos sobre el modelo --------------------------------------------
# Las nuevas librerías serán:
library(reshape2)    # Para acomodar los datos a ggplot en el BoxPlot.
library(outliers)    # Para detectar valores atípicos.
library(psych)       # Distribución de las variables.
library(GGally)      # Gráficos de correlación.
library(corrplot)
library(strucchange) # Permite comprobar la existencia de un cambio estructural.
library(car)         # Permite hacer las pruebas de hipótesis sobre un conjunto de parámetros.
library(lmtest)      # Pruebas sobre modelos lineales.
# library(olsrr)       # Permite ver otras medidas de influencia.
#                      # No me funcionó.
library(mctest)      # Prueba de hipótesis sobre multicolinealidad.
# 3.0| Última manipulación ------------------------------------------------
# Los datos son llevados a un lenguaje entendible por ggplot:
Datos = Datos %>%
add_column(ID = 1:dim(Datos)[1],
.before = 1)
Cajas = melt(Datos, id=c('ID','Sexo')) # Mostraría todas las variables, incluso
# nuestras construcciones.
Cajas = Cajas %>% filter(variable %in% c("Trabajo semanal", "Ingreso mensual",
"Edad", "Escolaridad"))
# Distintas visualizaciones:
ggplot(data = Cajas) + geom_boxplot(aes(x = variable, y = value))                # Un único gráfico con todos los diagramas.
ggplot(data = Cajas) + geom_boxplot(aes(x = variable, y = value, colour = Sexo)) # Un único gráfico con todos los diagramas diferenciando por sexo.
ggplot(data = Cajas, aes(x = factor(1), y = value, colour = Sexo)) +             # Múltiples gráficos diferenciando por sexo.
geom_boxplot() + facet_wrap(. ~ variable, scales="free") +
labs(title = "Gráfica de caja por variable",
subtitle = "Comparación entre sexos",
x = "Variables",
y = "Valores") +
theme_bw() +
theme(plot.title = element_text(size = 12, face = "bold"),
plot.subtitle = element_text(face = 'italic'),
axis.text.x=element_blank(),
legend.position = 'bottom',
legend.box.background = element_rect(),
legend.box.margin = margin(6, 6, 6, 6))
